[{"path":"https://jakemanger.github.io/spacetimeview/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 spacetimeview authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jakemanger.github.io/spacetimeview/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jake Manger. Author, maintainer. Jacob Berson. Author.","code":""},{"path":"https://jakemanger.github.io/spacetimeview/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Manger J, Berson J (2024). spacetimeview: Create Interactive Space Time Data Visualisations One Line Code. R package version 0.0.0.9000, https://jakemanger.github.io/spacetimeview/.","code":"@Manual{,   title = {spacetimeview: Create Interactive Space Time Data Visualisations in One Line of Code},   author = {Jake Manger and Jacob Berson},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://jakemanger.github.io/spacetimeview/}, }"},{"path":"https://jakemanger.github.io/spacetimeview/index.html","id":"spacetimeview-","dir":"","previous_headings":"","what":"Create Interactive Space Time Data Visualisations in One Line of Code","title":"Create Interactive Space Time Data Visualisations in One Line of Code","text":"spacetimeview generates interactive space time data dashboard one line code. provide data columns GPS coordinates (sf geometries) column times spacetimeview turn interactive plot. can use plot static website html file share others (hostable free services like github pages) interactive html widget explore data.","code":""},{"path":"https://jakemanger.github.io/spacetimeview/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Interactive Space Time Data Visualisations in One Line of Code","text":"can install development version spacetimeview GitHub :","code":"# after cloning with `git clone git@github.com:jakemanger/spacetimeview.git` devtools::load_all() #> ℹ Loading spacetimeview # or install from github # install.packages(\"devtools\") # devtools::install_github(\"jakemanger/spacetimeview\")"},{"path":"https://jakemanger.github.io/spacetimeview/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Create Interactive Space Time Data Visualisations in One Line of Code","text":"Load data GPS coordinates datetimes: Now, one line code, generate interactive plot space time  Note, interactive plot also website, can save html file simply deploy website host, even free static site hosts like Github Pages Now navigate link provided (e.g. https://jakemanger.github.io/spacetimeview/plot) see data displayed free, responsive interactive space time view website.","code":"library(spacetimeview) d <- read.csv('https://raw.githubusercontent.com/uber-web/kepler.gl-data/master/earthquakes/data.csv') d <- d[,c('Latitude', 'Longitude', 'DateTime', 'Magnitude')] spacetimeview(d, summary_radius = 10000, summary_height = 100) htmlwidgets::saveWidget(spacetimeview(d), \"my_plot.html\") #> Auto-detected time column: `DateTime` #> [1] \"Converting character column `timestamp` to factor\" #> Warning in spacetimeview(d): column_to_plot was not specified. Defaulting to #> `Magnitude` #> [1] \"Estimating an optimal radius for summary grid cells...\" #> [1] \"Starting ReactR plot\" #> Input to asJSON(keep_vec_names=TRUE) is a named vector. In a future version of jsonlite, this option will not be supported, and named vectors will be translated into arrays instead of objects. If you want JSON object output, please use a named list instead. See ?toJSON. # automate GitHub Pages setup to deploy html files in the `docs` folder usethis::use_github_pages(branch='main', path='/docs') #> ✔ Setting active project to \"/Users/jakemanger/projects/spacetimeview\". #> ✔ GitHub Pages is publishing from: #> • URL: \"https://jakemanger.github.io/spacetimeview/\" #> • Branch: \"main\" #> • Path: \"/docs\"  # move the my_plot.html we just generated to the docs/plot folder and push it to github # we use /plot so it doesn't conflict with pkgdown docs system(\"mkdir -p docs/\") system(\"mkdir -p docs/plot\")  # move the HTML file into the subdirectory and rename it as index.html for direct access system(\"mv ./my_plot.html ./docs/plot/index.html\")  # commit and push the changes to GitHub system(\"git add docs/plot/index.html\") system(\"git commit -m 'Deploy spacetimeview widget to GitHub Pages under /plot'\") system(\"git push\")"},{"path":"https://jakemanger.github.io/spacetimeview/index.html","id":"example-repositories","dir":"","previous_headings":"","what":"Example repositories","title":"Create Interactive Space Time Data Visualisations in One Line of Code","text":"examples, check : https://github.com/jakemanger/spacetimeview_example (Click “Use template” top start ready-made setup) add project ","code":""},{"path":"https://jakemanger.github.io/spacetimeview/reference/spacetimeview-shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny bindings for spacetimeview — spacetimeview-shiny","title":"Shiny bindings for spacetimeview — spacetimeview-shiny","text":"Output render functions using spacetimeview within Shiny applications interactive Rmd documents.","code":""},{"path":"https://jakemanger.github.io/spacetimeview/reference/spacetimeview-shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny bindings for spacetimeview — spacetimeview-shiny","text":"","code":"spacetimeviewOutput(outputId, width = \"100%\", height = \"100%\")  renderSpacetimeview(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://jakemanger.github.io/spacetimeview/reference/spacetimeview-shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny bindings for spacetimeview — spacetimeview-shiny","text":"outputId output variable read width, height Must valid CSS unit (like '100%', '400px', 'auto') number, coerced string 'px' appended. expr expression generates spacetimeview env environment evaluate expr. quoted expr quoted expression (quote())? useful want save expression variable.","code":""},{"path":"https://jakemanger.github.io/spacetimeview/reference/spacetimeview.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Space-Time Data with an Interactive Map and Plots — spacetimeview","title":"Visualize Space-Time Data with an Interactive Map and Plots — spacetimeview","text":"function provides space-time visualization interface exploring geospatial temporal data interactively. Users can toggle different plot types (e.g., summary, scatter) adjust various controls animation speed, radius scale, aggregation method, theme.","code":""},{"path":"https://jakemanger.github.io/spacetimeview/reference/spacetimeview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Space-Time Data with an Interactive Map and Plots — spacetimeview","text":"","code":"spacetimeview(   data,   style = \"Summary\",   column_to_plot = \"value\",   aggregate = \"MEAN\",   repeated_points_aggregate = \"None\",   sticky_range = TRUE,   summary_radius = \"auto\",   summary_coverage = 1,   animation_speed = 1,   theme = \"light\",   radius_scale = 1,   radius_min_pixels = 3,   summary_style = \"Hexagon\",   projection = \"Mercator\",   summary_height = 0,   color_scheme = \"YlOrRd\",   color_scale_type = \"quantize\",   num_decimals = 1,   factor_levels = NULL,   header_logo = \"\",   header_title = \"\",   header_website_link = \"\",   social_links = c(),   visible_controls = c(\"column_to_plot\", \"style\", \"color_scheme\", \"animation_speed\",     \"summary_radius\", \"summary_height\", \"radius_min_pixels\", \"aggregate\"),   control_names = c(column_to_plot = \"Dataset\", style = \"Plot Type\", color_scheme =     \"Color Scheme\", animation_speed = \"Animation Speed\", summary_radius = \"Cell Radius\",     summary_height = \"Cell Height\", radius_min_pixels = \"Minimum Point Radius\", aggregate     = \"Aggregate\"),   lat_name = \"auto\",   lng_name = \"auto\",   time_column_name = \"auto\",   plottable_columns = NULL,   width = \"100vw\",   height = \"100vh\",   elementId = NULL,   ... )"},{"path":"https://jakemanger.github.io/spacetimeview/reference/spacetimeview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Space-Time Data with an Interactive Map and Plots — spacetimeview","text":"data data frame containing space-time data columns latitude, longitude, timestamp, one value columns. data frame include least \"lat\", \"lng\", \"timestamp\". style Character. Initial plot style, either \"summary\" aggregated visualizations \"scatter\" individual data points. column_to_plot Character. name column visualize map. Must column present data \"lat\", \"lng\", \"timestamp\". aggregate Character. Aggregation method data summary plots. Options \"SUM\", \"MEAN\", \"COUNT\", \"MIN\", \"MAX\", \"MODE\". repeated_points_aggregate Character. Specifies handle multiple points location time. Options include \"SUM\", \"MEAN\", \"COUNT\", \"MIN\", \"MAX\", \"MODE\". sticky_range Logical. Whether keep min max color values constant across time intervals. Default TRUE. summary_radius Numeric. Sets radius grid hexagon cells summary plots. Adjusting value affects cell size. summary_coverage Numeric. Controls size grid hexagon cells multiple summary_radius. Range 0 1. animation_speed Numeric. Speed time animation, higher values increase animation speed. theme Character. Theme visualization, either \"light\" \"dark\". setting affects color schemes overall UI theme. radius_scale Numeric. Controls size points scatter plots. Larger values increase point radius. radius_min_pixels Numeric. Sets minimum size scatter plot points pixels, ensuring visibility even zoomed . summary_style Character. Determines layout summary plots, either \"grid\" \"hexagon\". projection Character. Map projection type, either \"mercator\" \"globe\". Adjusts map display style. summary_height Numeric. Sets height 3D representation cells summary plots, adding dimensionality data. color_scheme Character. Color scheme representing data visually. Options align colorbrewer color schemes. color_scale_type Character. Type color scale, either \"quantize\" \"quantile\", impacting color distribution data ranges. num_decimals Integer. Number decimal places shown color legend. factor_levels List. Optional. Provides factor levels categorical data, allowing customized color mappings labels. header_logo Character. Optional. URL logo displayed header visualization. header_title Character. Title displayed header, typically representing dataset application name. header_website_link Character. URL link attached header title logo, redirecting users related website. social_links Named list. URLs social media accounts displayed icons header. Supports keys like 'github', 'twitter', 'facebook', 'linkedin', etc., map respective profile URLs. example: social_links = c(github = \"https://github.com/jakemanger\", twitter = \"https://twitter.com/jakemanger\") visible_controls Character vector. List control names display interface. Controls include \"column_to_plot\", \"style\", \"color_scheme\", \"animation_speed\", etc. control_names Named list. Custom names controls displayed UI. Keys correspond control identifiers (e.g., \"column_to_plot\") values display names.","code":""},{"path":"https://jakemanger.github.io/spacetimeview/reference/spacetimeview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Space-Time Data with an Interactive Map and Plots — spacetimeview","text":"interactive space-time viewer visualizing exploring data.","code":""},{"path":"https://jakemanger.github.io/spacetimeview/reference/spacetimeview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize Space-Time Data with an Interactive Map and Plots — spacetimeview","text":"","code":"library(spacetimeview)  # Create a sample data frame with latitude, longitude, and time data <- data.frame(   lat = runif(100, min = -30, max = 30),   lng = runif(100, min = -100, max = 100),   time = seq(as.POSIXct(\"2023-01-01\"), by = \"days\", length.out = 100),   value = runif(100, min=0, max=10) )  # Generate the plot using spacetimeview plot <- spacetimeview(data) #> Auto-detected time column: `time` #> Warning: column_to_plot was not specified. Defaulting to `value` #> [1] \"Estimating an optimal radius for summary grid cells...\" #> [1] \"Starting ReactR plot\" #> [1] \"plottable columns: value\"  # Save the plot as an HTML file htmlwidgets::saveWidget(plot, \"spacetime_plot.html\") #> Input to asJSON(keep_vec_names=TRUE) is a named vector. In a future version of jsonlite, this option will not be supported, and named vectors will be translated into arrays instead of objects. If you want JSON object output, please use a named list instead. See ?toJSON.  # plotting data with a specific aggregate, projection, a header title and social media links plot2 <- spacetimeview(   data = data,    aggregate = 'MEAN',    projection = 'mercator',    header_title = 'BOM Weather Data',   social_links = c(     'github' = 'https://github.com/jakemanger/spacetimeview',      'twitter' = 'https://twitter.com/jakemanger'   ) ) #> Auto-detected time column: `time` #> Warning: column_to_plot was not specified. Defaulting to `value` #> [1] \"Estimating an optimal radius for summary grid cells...\" #> [1] \"Starting ReactR plot\" #> [1] \"plottable columns: value\"  # Save the plot as an HTML file htmlwidgets::saveWidget(plot2, \"spacetime_plot_with_website_header.html\") #> Input to asJSON(keep_vec_names=TRUE) is a named vector. In a future version of jsonlite, this option will not be supported, and named vectors will be translated into arrays instead of objects. If you want JSON object output, please use a named list instead. See ?toJSON. #> Input to asJSON(keep_vec_names=TRUE) is a named vector. In a future version of jsonlite, this option will not be supported, and named vectors will be translated into arrays instead of objects. If you want JSON object output, please use a named list instead. See ?toJSON."}]
